import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from pyspark.sql import SQLContext
from awsglue.context import GlueContext
from awsglue.job import Job
import pandas
from datetime import datetime
import time
from boto3.session import Session

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "tlc", table_name = "green", transformation_ctx = "datasource0")
# datasource1 = glueContext.create_dynamic_frame.from_catalog(database = "tlc", table_name = "yellow", transformation_ctx = "datasource1")
# datasource2 = glueContext.create_dynamic_frame.from_catalog(database = "tlc", table_name = "fhv", transformation_ctx = "datasource2")
# datasource3 = glueContext.create_dynamic_frame.from_catalog(database = "tlc", table_name = "fhvhv", transformation_ctx = "datasource3")
df0 = datasource0.toDF()
# df1 = datasource1.toDF()
# df2 = datasource2.toDF()
# df3 = datasource3.toDF()
df0 = df0.select('vendorid','pickup_datetime','dropoff_datetime','pulocationid','dolocationid')
# df1 = df1.select('vendorid','pickup_datetime','dropoff_datetime','pulocationid','dolocationid')
# df2 = df2.select('vendorid','pickup_datetime','dropoff_datetime','pulocationid','dolocationid')
# df3 = df3.select('vendorid','pickup_datetime','dropoff_datetime','pulocationid','dolocationid')
# df = df0.unionByName(df1).unionByName(df2).unionByName(df3)
data = df0.rdd
print(data.count())

# 检验统计量
def statistics(list):
    data = pandas.Series(list)
    return {'mean': data.mean(), 'std': data.std(), 'count': data.count()}

# 组合数组
def arrayToObject(array):
    obj = {}
    for one in array:
        obj.update(one)
    return obj

# 保存到S3
def saveToS3(path, df):
    df = pandas.DataFrame(df)
    df.to_csv(path.split('/')[1])
    session = Session(aws_access_key_id='AKIAS7W4C45L2MV2WPVE', aws_secret_access_key='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', region_name='ap-northeast-1')
    s3 = session.client('s3')
    s3.upload_file(path.split('/')[1], 'tlc-data', path)
    print('finish save S3')

# 获取统计该月的总天数
def getDaysByMonth(dataMonth):
    dataByDay = dataMonth.map(lambda x : (x[0].split(';')[1], 1)).groupByKey()
    return dataByDay.count()

# 获取pickup订单数
def getZoomPUNumByTime(dataMonth, starttime, endtime):
    dataBytime = dataMonth.filter(lambda x : x[1]['pickup_datetime'].split(' ')[1] > starttime and x[1]['pickup_datetime'].split(' ')[1] < endtime)
    countByzoom = dataBytime.map(lambda x : ('264' + ';' + x[0].split(';')[1], 1) if x[1]['pulocationid'] is None else (x[1]['pulocationid'] + ';' + x[0].split(';')[1], 1))
    countByzoom = countByzoom.reduceByKey(lambda x, y : x + y)
    countByzoom = countByzoom.map(lambda x : (x[0].split(';')[0], x[1])).groupByKey()
    countByzoom = countByzoom.map(lambda x : {x[0] : statistics(list(x[1]))})
    return countByzoom.collect()

# 获取dropoff订单数
def getZoomDONumByTime(dataMonth, starttime, endtime):
    dataBytime = dataMonth.filter(lambda x : x[1]['dropoff_datetime'].split(' ')[1] > starttime and x[1]['dropoff_datetime'].split(' ')[1] < endtime)
    countByzoom = dataBytime.map(lambda x : ('264' + ';' + x[0].split(';')[1], 1) if x[1]['dolocationid'] is None else (x[1]['dolocationid'] + ';' + x[0].split(';')[1], 1))
    countByzoom = countByzoom.reduceByKey(lambda x, y : x + y)
    countByzoom = countByzoom.map(lambda x : (x[0].split(';')[0], x[1])).groupByKey()
    countByzoom = countByzoom.map(lambda x : {x[0] : statistics(list(x[1]))})
    return countByzoom.collect()

# 获取车辆时刻表
def getAllCarTimeByDay(dataMonth):
    dataAllCarByDay = dataMonth.groupByKey().map(lambda x : (x[0], countAllCarTimeByDay(x[1])))
    return dataAllCarByDay
# 获取车辆时长
def countAllCarTimeByDay(dataCarByDay):
    et = '0000-00-00 00:00:00'
    st = '9999-99-99 99:99:00'
    for one in dataCarByDay:
        if one['pickup_datetime'] < st :
            st = one['pickup_datetime']
        if one['dropoff_datetime'] > et :
            et = one['dropoff_datetime']
    return {'starttime' : st, 'endtime' : et}

# 判断车辆是否在工作时间
def judgeCarTime(dataCarByDay, starttime, endtime):
    starttime = int(time.mktime(time.strptime(starttime, '%H:%M:%S')))
    endtime = int(time.mktime(time.strptime(endtime, '%H:%M:%S')))   
    # for one in dataCarByDay:
    putime = int(time.mktime(time.strptime(dataCarByDay['pickup_datetime'].split(' ')[1], '%H:%M:%S')))
    dotime = int(time.mktime(time.strptime(dataCarByDay['dropoff_datetime'].split(' ')[1], '%H:%M:%S')))
    if (starttime - dotime < 3600 and putime - endtime < 3600):
        return True
    return False

# 获取车辆工作比
def getCarRateByTime(dataMonth, starttime, endtime):
#     dataCarByTime = dataCarMonth.filter(lambda x : x[1]['endtime'].split(' ')[1] > starttime and x[1]['starttime'].split(' ')[1] < endtime)
#     dataCarByTime = dataCarByTime.map(lambda x : (x[0].split(';')[1], 1))
#     dataCarByTime = dataCarByTime.reduceByKey(lambda x, y : x + y)
    dataBytime = dataMonth.filter(lambda x : x[1]['dropoff_datetime'].split(' ')[1] > starttime and x[1]['pickup_datetime'].split(' ')[1] < endtime)
    # dataBytime = dataBytime.map(lambda x : (x[0], 1)).distinct()
    dataBytime = dataBytime.map(lambda x : (x[0].split(';')[1], 1))
    dataBytime = dataBytime.reduceByKey(lambda x, y : x + y)
    # dataCarByTime = dataMonth.groupByKey()
    dataCarByTime = dataMonth.filter(lambda x : judgeCarTime(x[1], starttime, endtime))
    dataCarByTime = dataCarByTime.map(lambda x : (x[0].split(';')[1], 1))
    dataCarByTime = dataCarByTime.reduceByKey(lambda x, y : x + y)
    dataRate = dataCarByTime.fullOuterJoin(dataBytime)
    dataRate = dataRate.map(lambda x : 0.0 if x[1][1] is None or x[1][0] is None else x[1][1] / x[1][0])
    return statistics(dataRate.collect())

# zoomSize = zoom.count()
month = 1
computing = 1

# 清洗空数据
dataMonth = data.filter(lambda x : x['vendorid'] is not None and  x['pickup_datetime'] is not None and x['dropoff_datetime'] is not None and x['pulocationid'] is not None and x['dolocationid'] is not None)
# 过滤月
dataMonth = dataMonth.filter(lambda x : '-%02d-'%(month) in x['pickup_datetime'].split(' ')[0] and x['pickup_datetime'].split(' ')[0] == x['dropoff_datetime'].split(' ')[0])
dataMonth = dataMonth.map(lambda x : (x['vendorid'] + ';' + x['pickup_datetime'].split(' ')[0], x))
# 获取车辆总时间
#     dataCarMonth = getAllCarTimeByDay(dataMonth)
crs = []
pus = []
dos = []
for part in range(24 * 12):
    hour1 = int(part / 12)
    min1 = part % 12
    hour2 = int((part + 1) / 12)
    min2 = (part + 1) % 12
    starttime = '%02d:%02d:00'%(hour1, min1 * 5)
    endtime = '%02d:%02d:00'%(hour2, min2 * 5)
    print('%s-%s'%(starttime, endtime))
    if computing == 1:
        cr = getCarRateByTime(dataMonth, starttime, endtime)
        print(cr)
        crs.append(cr)
    elif computing == 2:
        pu = arrayToObject(getZoomPUNumByTime(dataMonth, starttime, endtime))
        pus.append(pu)
    elif computing == 3:
        do = arrayToObject(getZoomDONumByTime(dataMonth, starttime, endtime))
        dos.append(do)
if computing == 1:
    saveToS3('%02d/crs.cvs'%(month), crs)
elif computing == 2:
    saveToS3('%02d/pus.cvs'%(month), pus)
elif computing == 3:
    saveToS3('%02d/dos.cvs'%(month), dos)

job.commit()